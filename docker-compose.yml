version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hmis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hmis_db
      POSTGRES_USER: hmis_user
      POSTGRES_PASSWORD: CHANGE_ME_SECURE_PASSWORD_123!@#
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/00-init-db.sql:ro
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backend/scripts/seedDemoData.js:/docker-entrypoint-initdb.d/02-seed.js:ro
    ports:
      - "5432:5432"
    networks:
      - hmis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hmis_user -d hmis_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hmis-redis
    restart: unless-stopped
    command: redis-server --requirepass CHANGE_ME_REDIS_PASSWORD_456!@#
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hmis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # HMIS Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hmis-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hmis_db
      - DB_USER=hmis_user
      - DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD_123!@#
      - DB_SSL=false
      - JWT_SECRET=CHANGE_ME_JWT_SECRET_789!@#$%^&*()_+QWERTYUIOPASDFGHJKLZXCVBNM
      - JWT_REFRESH_SECRET=CHANGE_ME_JWT_REFRESH_SECRET_456!@#$%^&*()_+QWERTYUIOPASDFGHJKLZXCVBNM
      - REDIS_PASSWORD=CHANGE_ME_REDIS_PASSWORD_456!@#
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001
    ports:
      - "5000:5000"
    networks:
      - hmis-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx)
  frontend:
    image: nginx:alpine
    container_name: hmis-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3000:80"
    networks:
      - hmis-network
    depends_on:
      - backend

networks:
  hmis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
