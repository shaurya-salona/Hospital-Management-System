version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hmis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hmis_db
      POSTGRES_USER: hmis_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backend/scripts/seedDemoData.js:/docker-entrypoint-initdb.d/02-seed.js:ro
    ports:
      - "5432:5432"
    networks:
      - hmis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hmis_user -d hmis_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: hmis-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hmis-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # HMIS Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hmis-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hmis_db
      DB_USER: hmis_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      DB_SSL: false
      DB_MAX_CONNECTIONS: 20
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_change_me}
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_here_minimum_32_characters}
      JWT_EXPIRE: 24h
      LOG_LEVEL: info
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      SMTP_HOST: ${SMTP_HOST:-localhost}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      BACKUP_ENABLED: true
      HEALTH_CHECK_INTERVAL: 30000
    ports:
      - "5000:5000"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_backups:/app/backups
    networks:
      - hmis-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # HMIS Frontend (Nginx serving static files)
  frontend:
    image: nginx:alpine
    container_name: hmis-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - hmis-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Backup Service (Optional)
  backup:
    image: postgres:15-alpine
    container_name: hmis-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    volumes:
      - backend_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - hmis-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/bin/sh", "/backup.sh"]
    profiles: ["backup"]

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hmis-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hmis-network
    profiles: ["monitoring"]

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: hmis-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hmis-network
    depends_on:
      - prometheus
    profiles: ["monitoring"]

networks:
  hmis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

