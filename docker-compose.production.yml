version: '3.8'

services:
    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        container_name: hmis-postgres
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${DB_NAME:-hmis_production}
            POSTGRES_USER: ${DB_USER:-hmis_user}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
            - ./backend/scripts/optimize-database.sql:/docker-entrypoint-initdb.d/02-optimize.sql
            - ./scripts/backup-recovery.sh:/usr/local/bin/backup-recovery.sh
        ports:
            - '5432:5432'
        networks:
            - hmis-network
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-hmis_user} -d ${DB_NAME:-hmis_production}']
            interval: 10s
            timeout: 5s
            retries: 5
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    # Redis for caching and sessions
    redis:
        image: redis:7-alpine
        container_name: hmis-redis
        restart: unless-stopped
        command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
        volumes:
            - redis_data:/data
        ports:
            - '6379:6379'
        networks:
            - hmis-network
        healthcheck:
            test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
            interval: 10s
            timeout: 3s
            retries: 5
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    # HMIS Backend API
    backend:
        build:
            context: .
            dockerfile: Dockerfile.production
        container_name: hmis-backend
        restart: unless-stopped
        environment:
            NODE_ENV: production
            PORT: 3000
            DB_HOST: postgres
            DB_PORT: 5432
            DB_NAME: ${DB_NAME:-hmis_production}
            DB_USER: ${DB_USER:-hmis_user}
            DB_PASSWORD: ${DB_PASSWORD}
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
            JWT_SECRET: ${JWT_SECRET}
            JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
            ENCRYPTION_KEY: ${ENCRYPTION_KEY}
            BCRYPT_ROUNDS: 12
            LOG_LEVEL: info
            CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com}
        volumes:
            - ./logs:/app/logs
            - ./uploads:/app/uploads
            - ./backups:/app/backups
        ports:
            - '3000:3000'
        networks:
            - hmis-network
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '5'

    # Nginx Reverse Proxy
    nginx:
        image: nginx:alpine
        container_name: hmis-nginx
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/ssl:/etc/nginx/ssl
            - ./frontend:/usr/share/nginx/html
            - ./logs/nginx:/var/log/nginx
        networks:
            - hmis-network
        depends_on:
            - backend
        healthcheck:
            test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
            interval: 30s
            timeout: 10s
            retries: 3
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    # Monitoring with Prometheus
    prometheus:
        image: prom/prometheus:latest
        container_name: hmis-prometheus
        restart: unless-stopped
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
        volumes:
            - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        ports:
            - '9090:9090'
        networks:
            - hmis-network
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    # Grafana for visualization
    grafana:
        image: grafana/grafana:latest
        container_name: hmis-grafana
        restart: unless-stopped
        environment:
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
            GF_USERS_ALLOW_SIGN_UP: false
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
        ports:
            - '3001:3000'
        networks:
            - hmis-network
        depends_on:
            - prometheus
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    # Log aggregation with ELK Stack (Elasticsearch, Logstash, Kibana)
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        container_name: hmis-elasticsearch
        restart: unless-stopped
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        ports:
            - '9200:9200'
        networks:
            - hmis-network
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

    # Backup service
    backup:
        image: postgres:15-alpine
        container_name: hmis-backup
        restart: 'no'
        environment:
            PGPASSWORD: ${DB_PASSWORD}
        volumes:
            - ./scripts/backup-recovery.sh:/backup-script.sh
            - ./backups:/backups
        networks:
            - hmis-network
        depends_on:
            - postgres
        command: >
            sh -c "
              chmod +x /backup-script.sh &&
              echo '0 2 * * * /backup-script.sh auto' | crontab - &&
              crond -f
            "
        logging:
            driver: 'json-file'
            options:
                max-size: '10m'
                max-file: '3'

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
        driver: local
    elasticsearch_data:
        driver: local

networks:
    hmis-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16
